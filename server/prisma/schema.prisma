// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  HIDDEN
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String?
  gender    Gender   @default(HIDDEN)
  active    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  role      Role     @default(STUDENT)
  course    Int?
  studentId String?
  major     Major?   @relation(fields: [majorId], references: [id])
  majorId   Int?
  enrolls   Enroll[]
  uses      Use[]
  uid       String   @unique
}

model Major {
  id        Int    @id @default(autoincrement())
  majorName String
  users     User[]
}

enum State {
  WAIT
  IN_PROCESS
  DONE
  PROPOSE
}

enum Type {
  BASIS
  MASTER
  BOTH
}

model Topic {
  id       Int    @id @default(autoincrement())
  name     String
  describe String
  type     Type
  uses     Use[]
}

model Use {
  id           Int       @id @default(autoincrement())
  topic        Topic     @relation(fields: [topicId], references: [id])
  topicId      Int      
  enrolls      Enroll[]
  userIncharge User      @relation(fields: [userId], references: [id])
  userId       Int       
  semester     Semester? @relation(fields: [semesterId], references: [id])
  semesterId   Int?
}

model Enroll {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      
  use     Use      @relation(fields: [useId], references: [id])
  useId   Int     
  reports Report[]
}

model Report {
  id        Int      @id @default(autoincrement())
  doneJob   String
  nextJob   String
  createdAt DateTime @default(now())
  promiseAt DateTime
  enroll    Enroll   @relation(fields: [enrollId], references: [id])
  enrollId  Int      
}

model Year {
  id        Int        @id @default(autoincrement())
  name      String
  semesters Semester[]
}

model Semester {
  id      Int      @id @default(autoincrement())
  name    String
  startAt DateTime
  endAt   DateTime
  year    Year?    @relation(fields: [yearId], references: [id])
  yearId  Int?
  uses    Use[]
}
